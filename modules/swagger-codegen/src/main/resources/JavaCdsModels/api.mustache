package {{apiPackage}};

import au.org.consumerdatastandards.support.*;
import au.org.consumerdatastandards.support.security.EndpointAuth;
import au.org.consumerdatastandards.support.security.EndpointAuthAccess;
import au.org.consumerdatastandards.support.security.EndpointAuthType;
import au.org.consumerdatastandards.api.common.responses.ErrorResponse;
import au.org.consumerdatastandards.api.common.models.Scope;
import au.org.consumerdatastandards.support.data.Format;
import au.org.consumerdatastandards.support.data.CustomAttribute;
import au.org.consumerdatastandards.support.data.StringFormat;
import au.org.consumerdatastandards.support.data.CustomAttributes;
import au.org.consumerdatastandards.support.data.CDSDataType;
import au.org.consumerdatastandards.support.data.CustomDataType;

import {{modelPackage}}.*;

{{#imports}}import {{import}};
{{/imports}}

{{#operations}}
@Section(name = "{{section}}"{{#tags}}{{#-first}}, tags = {"{{.}}"{{/-first}}{{^-first}}"{{.}}"{{/-first}}{{^-last}},{{/-last}}{{#-last}}{{closeBracket}}{{/-last}}{{/tags}})
public interface {{classname}}  {
{{#_enums}}

{{>enumClass}}
{{/_enums}}
{{#operation}}

    @Endpoint(
        path = "{{{path}}}",
        summary = "{{ summary }}",
        description = "{{{notes}}}",
        requestMethod = RequestMethod.{{ httpMethod }},
        operationId = "{{nickname}}",
        responses = {
            @EndpointResponse(
                responseCode = ResponseCode.OK,
                description = "Success",
                content = {{returnBaseType}}{{^returnBaseType}}void{{/returnBaseType}}.class
            ){{#hasCdsScopes}},
            @EndpointResponse(
                responseCode = ResponseCode.UNAUTHORIZED,
                description = "Authorization header missing or invalid token",
                content = ErrorResponse.class
            ),
            @EndpointResponse(
                responseCode = ResponseCode.FORBIDDEN,
                description = "Token has incorrect scope or a security policy was violated.",
                content = ErrorResponse.class
            ){{/hasCdsScopes}}
        }{{#hasCdsScopes}},
        requiredAuth = {
            @EndpointAuth(
                type = EndpointAuthType.CDS_FAPI,
                access = EndpointAuthAccess.READ_ONLY,
                scopes = {{openBracket}} {{#cdsScopes}}Scope.{{#uppercase}}{{.}}{{/uppercase}}{{^-last}},{{/-last}}{{/cdsScopes}} {{closeBracket}}
            )
        }{{/hasCdsScopes}}
    ){{#cdsExtensionSet}}{{#-first}}
    @CustomAttributes({{openBracket}}{{/-first}}{{^value.length}}
        {{#value}}@CustomAttribute(name = "{{key}}", value = "{{.}}", multiple = true){{^-last}},
        {{/-last}}{{/value}}{{/value.length}}{{#value.length}}@CustomAttribute(name = "{{key}}", value = "{{value}}"){{/value.length}}{{^-last}}{{^value.empty}},
        {{/value.empty}}{{/-last}}{{#-last}}
    {{closeBracket}}){{/-last}}{{/cdsExtensionSet}}
    {{returnType}} {{operationId}}({{^hasParams}});{{/hasParams}}{{#hasParams}}{{#allParams}}
        @Param(
            name = "{{baseName}}",
            description = "{{description}}",
            in = {{#isHeaderParam}}ParamLocation.HEADER{{/isHeaderParam}}{{#isPathParam}}ParamLocation.PATH{{/isPathParam}}{{#isQueryParam}}ParamLocation.QUERY{{/isQueryParam}}{{#isBodyParam}}ParamLocation.BODY{{/isBodyParam}}{{#defaultValue}},
            defaultValue = "{{{defaultValue}}}"{{/defaultValue}}{{#isRequired}},
            required = true{{/isRequired}}{{#isReference}},
            reference = "{{referenceName}}"{{/isReference}}
        ){{#isCdsType}}
        {{cdsTypeAnnotation}}{{/isCdsType}}
        {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}
    );{{/hasParams}}
{{/operation}}
{{/operations}}
}
